{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "ExpertSearch.svelte"
  ],
  "sourcesContent": [
    "<script>\n  let name = \"expertsearch-plus\";\n\n  import ExpertSearch from './ExpertSearch.svelte';\n</script>\n\n<style>\n  main {\n    text-align: center;\n    padding: 1em;\n    max-width: 240px;\n    margin: 0 auto;\n  }\n\n  h1 {\n    color: #ff3e00;\n    text-transform: uppercase;\n    font-size: 4em;\n    font-weight: 100;\n  }\n\n  @media (min-width: 640px) {\n    main {\n      max-width: none;\n    }\n  }\n</style>\n\n<!--<svelte:options tag=\"expertsearch-plus\" /> -->\n\n<main>\n  <h1>This is your Svelte app: {name}!</h1>\n  <h2>Hello world!</h2>\n  <p>\n    Visit the\n    <a href=\"https://svelte.dev/tutorial\">Svelte tutorial</a>\n    to learn how to build Svelte apps.\n  </p>\n\n  <ExpertSearch />\n</main>\n",
    "<script>\n  const regions = [\n    'all regions',\n    'ZÃ¼rich',\n    'Basel',\n    'Winterthur'\n  ]\n\n  // TODO does this work in production?\n  // TODO make portal_type and API_URL configurable\n  const apiUrl = process.env.isProd ? '/' : 'http://localhost:8080/Plone/';\n  const searchApiUrl = apiUrl + '@search?portal_type=dexterity.membrane.member&fullobjects=1&sort_on=last_name&sort_order=ascending';\n\n  // state of component\n  let searchstring = '';\n  let region = 'all regions';\n  $: searchUrl = ((region == 'all regions') ? searchApiUrl : searchApiUrl + '&region=' + encodeURI(region))\n      + (searchstring ? ('&SearchableText=' + searchstring + '*') : '');\n  let experts = [];\n\n  $: getExperts(searchstring, region);\n\n  async function getExperts(mysearchstring, myregion) {\n\n    // search from 3 letters on\n    // search also for empty searchstring to get all\n    if ([1,2].includes(mysearchstring.length)) {\n      return\n    }\n\n    fetch(searchUrl, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      }\n    })\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    })\n    .then(data => {\n      experts = data?.items || [];\n      return experts;\n    })\n    .catch(error => {\n      console.error('There has been a problem with your fetch operation:', error);\n    });\n  };\n\n  const handleClickRegion = (event) => {\n    region = event.target.value;\n  }\n</script>\n\n<h2>Expert Search</h2>\n<form action=\"\">\n  <input class=\"searchstring\" bind:value={searchstring} placeholder=\"search\">\n  <br>\n  {#each regions as rgn}\n    <input \n      type=button\n      class=\"regionbutton\"\n      on:click|preventDefault={handleClickRegion}\n      value={rgn}>\n  {/each}\n</form>\n<p><i>Results{#if searchstring}{' '}for {searchstring}{/if} in {region}</i></p>\n\n<div class=\"cards\">\n  {#each experts as expert, i (expert['@id'])}\n    <div class=\"card\">\n      <span class=\"fullname\">{expert.first_name} {expert.last_name}</span>\n      <br>\n      <span class=\"competence\">{expert.competence}</span>\n      <br>\n      <span class=\"organisation\">{expert.organisation}</span>\n      <br>\n      <span class=\"region\">{expert.region}</span>\n    </div>\n  {:else}\n    <p>no experts found</p>\n  {/each}\n</div>\n\n<style>\n  .cards {\n    display: flex;\n    flex-wrap: wrap;\n    margin-top: 2rem;\n  }\n  .card {\n    width: 15rem;\n    min-height: 10em;\n    background: white;\n    margin: 0 1rem 1rem 0;\n    padding: 1.5rem 1rem;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.26);\n    border-radius: 3px;\n  }\n</style>"
  ],
  "names": [],
  "mappings": "AAOE,IAAI,eAAC,CAAC,AACJ,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,AAChB,CAAC,AAED,EAAE,eAAC,CAAC,AACF,KAAK,CAAE,OAAO,CACd,cAAc,CAAE,SAAS,CACzB,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,GAAG,AAClB,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACzB,IAAI,eAAC,CAAC,AACJ,SAAS,CAAE,IAAI,AACjB,CAAC,AACH,CAAC;AC+DD,MAAM,cAAC,CAAC,AACN,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,IAAI,AAClB,CAAC,AACD,KAAK,cAAC,CAAC,AACL,KAAK,CAAE,KAAK,CACZ,UAAU,CAAE,IAAI,CAChB,UAAU,CAAE,KAAK,CACjB,MAAM,CAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CACrB,OAAO,CAAE,MAAM,CAAC,IAAI,CACpB,UAAU,CAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CACzC,aAAa,CAAE,GAAG,AACpB,CAAC"
}